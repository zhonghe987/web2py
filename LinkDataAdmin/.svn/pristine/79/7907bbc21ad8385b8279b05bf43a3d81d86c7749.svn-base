# -*- coding: utf-8 -*-

LIST_NUM = 10

@auth.requires_login()
def index():
    s = [('all','全部')]
    s.extend([(d.id,'%s (%s)' %(d.dsName,d.cookieDomain)) for d in lda_db(lda_db.dataSource.account_id == auth.user.id).select()])
    btn = INPUT(_value='搜索',_type='submit',_id='sub')
    form = SQLFORM.factory(Field('name'),
                                                      Field('source',requires=IS_IN_SET(s)),
                                                      buttons = [btn]
                  ) 
    form.accepts(request, session)
    data = lda_db((lda_db.tagProj.account_id==auth.user.id) & (lda_db.tagProj.tpStatus!='delete')).select(lda_db.tagProj.id,lda_db.tagProj.tpName,lda_db.tagProj.tpStatus,lda_db.tagProj.date,
                                                                                                                            lda_db.dataSource.dsName,lda_db.dataSource.cookieDomain,lda_db.dataSource.id,
                                                                                                                            join=lda_db.dataSource.on(lda_db.tagProj.dataSource_id==lda_db.dataSource.id))
    return dict(form=form, data=data, breadcrumb=['标签项目管理'], panelTitle='标签项目管理' )

@auth.requires_login()
def new():
    dataSource = lda_db(lda_db.dataSource.account_id==auth.user.id).select()
    options = [(ds.id, '%s (%s)' %(ds.dsName,ds.cookieDomain)) for ds in dataSource]
    btn = INPUT(_type='submit', _value='保存',_id='sub')
    form = SQLFORM.factory(Field('name', requires=IS_NOT_EMPTY()),
                                                      Field( 'source', requires = IS_IN_SET(options)),
                                                      buttons = [btn]
                )

    if form.accepts(request, session):
        print 'vars->',form.vars
        r = lda_db.tagProj.insert(account_id=auth.user.id, dataSource_id=form.vars.source, tpName=form.vars.name)
        lda_db.executesql("CREATE TABLE Tag_%s (ds_id int, ti_id int DEFAULT '0', cookieId varchar(45), primary key (ds_id)) engine=MyISAM DEFAULT CHARSET=utf8" %r)
        lda_db.executesql('CREATE TABLE TagItem_%s (ti_id int, count int, value varchar(45), date datetime, primary key (ti_id)) engine=MyISAM DEFAULT CHARSET=utf8' %r)
        lda_db.define_table('Tag_%s' %r, Field('ds_id','id'),Field('ti_id','integer'))
        lda_db.define_table('TagItem_%s' %r, Field('ti_id','id'), Field('value'), Field('date','datetime'))
        lda_db.executesql("INSERT INTO Tag_%s(ds_id,cookieId) SELECT ds_id,cookieId FROM DS_%s" %(r,form.vars.source))
        #增加权限
        g_id = auth.id_group(auth.user.company)
        auth.add_permission(g_id,'read','Tag_%s' %r,0)
        auth.add_permission(g_id,'insert', 'Tag_%s' %r, 0)
        auth.add_permission(g_id,'update','Tag_%s' %r, 0)
        auth.add_permission(g_id,'read','TagItem_%s' %r,0)
        auth.add_permission(g_id,'insert', 'TagItem_%s' %r, 0)
        auth.add_permission(g_id,'update','TagItem_%s' %r, 0)
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form -> %s' %options

    return dict(form=form, breadcrumb=['标签项目管理','新增标签项目'], panelTitle='新增标签项目')


def  editTag():
    s=[request.vars.cookie]
    btn = INPUT(_value='保存',_type='submit',_id='sube')
    form = SQLFORM.factory(Field('ed_tagname'),
                                                      Field('source',requires=IS_IN_SET(s)),
                                                      buttons = [btn]
                  ) 
    
    if form.accepts(request, session):
        lda_db.executesql("update tagProj set tpName = '%s' where tp_id = %s and dataSource_id = %s"%(request.vars.ed_tagname,request.vars.tag_id,request.vars.ds_id))
        redirect(URL('tagProj','index'))
    return dict(form = form,breadcrumb=['标签项目管理','新增标签项目'], panelTitle='编辑标签项目')

def deleTagP():
    lda_db.executesql( "update tagProj set  tpStatus = 'delete'  where tp_id = %s"%request.post_vars.de_id)
    return 0

@auth.requires_login()
def sync():
    dsId = request.vars.dsId
    tpId = request.vars.tpId
    tagProj = lda_db(lda_db.tagProj.id==tpId).select().first()
    session.tagProj = tagProj
    ds = lda_db(lda_db.dataSource.id==dsId).select().first()
    session.dataSource = ds
    btn = INPUT(_value='上传已标记的cookie数据', _type='submit', _id='sub')
    import os
    cvs_form = SQLFORM.factory( Field('filename', 'upload',uploadfolder=os.path.join(request.folder,'uploads')),
                                                               buttons = [btn]
                          )
    #print cvs_form.vars
    if cvs_form.accepts(request, formname='cvs_form'):
        response.flash = 'file upload: %s' %cvs_form.vars
        if cvs_form.vars.filename:            
            import datetime
            import csv
            p = os.path.join(request.folder,'uploads')
            fn = os.path.join(p,'cookiesChecked-%s-%s-%s.csv' %(auth.user.id,session.tagProj.id,datetime.datetime.now().strftime("%Y%m%d%H%M%S")))
            os.rename(os.path.join(p,cvs_form.vars.filename), fn)
            f = open(fn, 'r')
            f.readline()
            reader = csv.reader(f)
            projId = session.tagProj.id
            value = dict((v,i) for i,v in lda_db.executesql("SELECT ti_id,value FROM TagItem_%s" %projId))
            maxId = lda_db.executesql("SELECT max(ti_id) FROM TagItem_%s" %projId)[0][0]
            if not maxId:
                maxId = 0
            #print value, maxId
            data = []
            for id, _, v in reader:
                if v == 'None':
                    continue
                v = v.decode('GBK')
                ti = value.get(v, None)
                if ti:
                    data.append('(%s,%d)' %(id,ti))
                else:
                    maxId += 1
                    value[v] = maxId
                    #print "INSERT INTO TagItem_%s (ti_id,value) VALUES (%d,'%s')" %(projId,maxId,v)
                    lda_db.executesql("INSERT INTO TagItem_%s (ti_id,value) VALUES (%d,'%s')" %(projId,maxId,v))
                    data.append('(%s,%d)' %(id,maxId))
            i = 0
            c = len(data)
            #print 'len data:', len(data)
            while i < c:
                s = ','.join(data[i:i+5000])
                lda_db.executesql("INSERT INTO Tag_%s (ds_id,ti_id) VALUES %s ON DUPLICATE KEY UPDATE ti_id=values(ti_id)" %(projId, s))
                i += 5000

            count = lda_db.executesql("SELECT ti_id,count(ds_id) FROM Tag_%s WHERE ti_id>0 group by ti_id" %projId)
            d = []
            for i, c in count:
                d.append('(%d,%d)' %(i,c))
            lda_db.executesql("INSERT INTO TagItem_%s (ti_id,count) values %s ON DUPLICATE KEY UPDATE count=values(count)" %(projId, ','.join(d)))
    else:
        response.flash = 'error'
    maxId = lda_db.executesql('SELECT max(ds_id) FROM Tag_%s' %tpId)[0][0]
    if maxId:
        lda_db.executesql("INSERT INTO Tag_%s(ds_id,cookieId) SELECT ds_id,cookieId FROM DS_%s WHERE ds_id > %d" %(tpId,dsId,maxId))
    allCount = lda_db.executesql('SELECT count(ds_id) FROM Tag_%s' %tpId)[0][0]
    noCount = lda_db.executesql('SELECT count(ds_id) FROM Tag_%s WHERE ti_id=0' %tpId)[0][0]
    
    # 历史同步数据
    import math
    dc = lda_db(lda_db.tagSyncLog.tagProjId==tpId).count()
    pc = int(math.ceil(dc/float(LIST_NUM)))
    data = lda_db(lda_db.tagSyncLog.tagProjId==tpId).select(lda_db.tagSyncLog.count,lda_db.tagSyncLog.date, orderby="tid desc", limitby=(0,LIST_NUM))
    return dict(form=cvs_form, tagProjName=tagProj.tpName, projId=tpId,
                          dataSource='%s (%s)' %(ds.dsName,ds.cookieDomain),
                          counted=allCount-noCount, noCount=noCount,
                           syncData=data, pageCount=pc, dataCount=dc,
                           breadcrumb=['标签项目管理','同步标签项'], panelTitle='同步标签项')


def createCSV():
    import os
    import datetime
    mode =  request.post_vars.mode
    filename = 'cookies%s-%s.csv' %(mode,datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
    p = os.path.join(request.folder, 'private', filename)
    task = scheduler.queue_task('createTagFile', pvars=dict(projId=request.post_vars.projId, mode=mode,filename=p), sync_output=2)
    return response.json(dict(filename=filename, taskId=task.id))

def downIncr():
    import os
    import datetime
    import csv
    data = lda_db.executesql("SELECT ds_id,cookieId FROM Tag_%s WHERE ti_id=0" %session.tagProj.id)   
    filename = 'cookiesIncr-%s.csv' %datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    path = os.path.join(request.folder, 'private', filename)
    f = open(path,"wb")
    writer = csv.writer(f)
    writer.writerow(['id','cookies','value'])
    for i,c in data:
        writer.writerow([i,c,'None'])
    f.close()
    response.headers['Content-type'] = 'application/octet-stream'
    response.headers['Content-Disposition'] = 'attachment; filename=%s' %filename
    return response.stream(open(path), chunk_size=4096)


def syncPaginate():
    print request.post_vars
    sPos = (int(request.post_vars.page) - 1) * LIST_NUM
    data = lda_db(lda_db.tagSyncLog.tagProjId==request.post_vars.projId).select(lda_db.tagSyncLog.count,lda_db.tagSyncLog.date, orderby="tid desc", limitby=(sPos,sPos+LIST_NUM)) 
    import gluon.contrib.simplejson
    return response.json(dict(syncData=data))

def projFind():
    s = [('all','全部')]
    s.extend([(d.id,'%s (%s)' %(d.dsName,d.cookieDomain)) for d in lda_db(lda_db.dataSource.account_id == auth.user.id).select()])
    form = SQLFORM.factory(Field('name'),
                                                      Field('source',requires=IS_IN_SET(s))
                                                    )
    cnd = (lda_db.tagProj.account_id==auth.user.id) & (lda_db.tagProj.tpStatus!='delete')
    
    if form.accepts(request.post_vars, session):
        if request.post_vars.name:
            cnd = cnd & (lda_db.tagProj.tpName == request.post_vars.name)
     
        if request.post_vars.source != 'all':
            cnd = cnd & (lda_db.tagProj.dataSource_id==request.post_vars.source)

    data = lda_db(cnd).select(lda_db.tagProj.id,lda_db.tagProj.tpName,lda_db.tagProj.tpStatus,lda_db.tagProj.date,
                              lda_db.dataSource.dsName,lda_db.dataSource.cookieDomain,lda_db.dataSource.id,
                              join=lda_db.dataSource.on(lda_db.tagProj.dataSource_id==lda_db.dataSource.id))
    import gluon.contrib.simplejson
    return response.json(dict(data=data))



def tagValit():
    tpName = lda_db(lda_db.tagProj.account_id == request.post_vars.uid).select(lda_db.tagProj.tpName) 
    das = [data.tpName for data in tpName]
    if request.post_vars.tname in das:
        return 1
    return 0


def getTaskProgress():
    import datetime
    print 'get task progress:', request.post_vars
    d = sch_db(sch_db.scheduler_run.task_id==request.post_vars.taskId).select(sch_db.scheduler_run.status,sch_db.scheduler_run.run_output,orderby='id desc').first()
    print d
    if not d or not d.run_output:
          return response.json(dict(status="RUNNING", progress="10%" ))
    return response.json(dict(status=d.status, progress=d.run_output))

def downFile():
    filename = request.get_vars.filename
    response.headers['Content-type'] = 'application/octet-stream'
    response.headers['Content-Disposition'] = 'attachment; filename=%s' %filename
    import os
    path = os.path.join(request.folder, 'private', filename)
    return response.stream(open(path), chunk_size=4096)
   